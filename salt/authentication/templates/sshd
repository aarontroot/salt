# This file is managed by Salt, do not make changes locally
# /srv/salt/authentication/files/sshd.default

# PAM configuration for the Secure Shell service

{% if auth == "default" -%}
# Standard Un*x authentication.
@include common-auth
{% elif auth == "kerberos" -%}
auth      sufficient  pam_krb5.so       minimum_uid=1000
auth      sufficient  pam_unix.so
{% elif auth == "securid" -%}
auth      sufficient  /lib/security/pam_radius_auth.so
{% endif -%}

{% if auth == "default" -%}
# Disallow non-root logins when /etc/nologin exists.
account    required     pam_nologin.so

# Uncomment and edit /etc/security/access.conf if you need to set complex
# access limits that are hard to express in sshd_config.
# account  required     pam_access.so

# Standard Un*x authorization.
@include common-account
{% elif auth == "kerberos" -%}
account   sufficient  pam_krb5.so       minimum_uid=1000
account   required    pam_nologin.so
account   required    pam_unix.so
account   sufficient  pam_localuser.so
account   sufficient  pam_succeed_if.so uid < 500 quiet
account   required    pam_permit.so
{% elif auth == "securid" -%}
account   required    pam_nologin.so
account   required    pam_unix.so
account   sufficient  pam_localuser.so
account   sufficient  pam_succeed_if.so uid < 500 quiet
account   required    pam_permit.so
{% endif -%}

{% if auth == "default" -%}
# SELinux needs to be the first session rule.  This ensures that any
# lingering context has been cleared.  Without this it is possible that a
# module could execute code in the wrong domain.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so close

# Set the loginuid process attribute.
session    required     pam_loginuid.so

# Create a new session keyring.
session    optional     pam_keyinit.so force revoke

# Standard Un*x session setup and teardown.
@include common-session

# Print the message of the day upon successful login.
# This includes a dynamically generated part from /run/motd.dynamic
# and a static (admin-editable) part from /etc/motd.
session    optional     pam_motd.so  motd=/run/motd.dynamic noupdate
session    optional     pam_motd.so # [1]

# Print the status of the user's mailbox upon successful login.
session    optional     pam_mail.so standard noenv # [1]

# Set up user limits from /etc/security/limits.conf.
session    required     pam_limits.so

# Read environment variables from /etc/environment and
# /etc/security/pam_env.conf.
session    required     pam_env.so # [1]
# In Debian 4.0 (etch), locale-related environment variables were moved to
# /etc/default/locale, so read that as well.
session    required     pam_env.so user_readenv=1 envfile=/etc/default/locale

# SELinux needs to intervene at login time to ensure that the process starts
# in the proper default security context.  Only sessions which are intended
# to run in the user's context should be run after this.
session [success=ok ignore=ignore module_unknown=ignore default=bad]        pam_selinux.so open
{% elif auth == "kerberos" -%}
# pam_selinux.so close should be the first session rule
session   required      pam_selinux.so  close
session   required      pam_loginuid.so
session   optional      pam_krb5.so     minimum_uid=1000
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session   required      pam_selinux.so  open env_params
session   optional      pam_keyinit.so  force revoke
session   required      pam_limits.so
session   [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session   required      pam_unix.so
{% elif auth == "securid" -%}
# pam_selinux.so close should be the first session rule
session   required      pam_selinux.so  close
session   required      pam_loginuid.so
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session   required      pam_selinux.so  open env_params
session   optional      pam_keyinit.so  force revoke
session   required      pam_limits.so
session   [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session   required      pam_unix.so
{% endif -%}

{% if auth == "default" -%}
# Standard Un*x password updating.
@include common-password
{% elif auth == "kerberos" -%}
password  sufficient  pam_krb5.so       minimum_uid=1000
password  sufficient  pam_unix.so md5 shadow nullok try_first_pass use_authtok
password  required    pam_deny.so
{% elif auth == "securid" -%}
password  sufficient  pam_unix.so md5 shadow nullok try_first_pass use_authtok
password  required    pam_deny.so
{% endif -%}

# vim: syntax=python
